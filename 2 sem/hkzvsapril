e1 <- c(1,0)
e2 <- c(0,1)

h <- 1 #приращение 

e <- 0.01 #точность


d <- 2 #коэффициент уменьшения шага

f <- function(p){
    #return((p[1]-3)^2 + (p[2]+1)^2)
    return((p[1]-2)^2 + (p[2]-9)^2 +p[1]*p[2])
}

find_point(p){
    q <- c()
    t <- c()
    
    t <- append(t,p)
    q <- append(q, f(p))
    
    p2 <- p + h*e1 + h*e2
    t <- append(t,p2)
    q <- append(q, f(p2))
    
    p3 <- p + h*e1
    t <- append(t,p3)
    q <- append(q, f(p3))
    
    p4 <- p + h*e2
    t <- append(t,p4)
    q <- append(q, f(p4))
    
    p5 <- p - h*e1 + h*e2
    t <- append(t,p5)
    q <- append(q, f(p5))

    p6 <- p - h*e1 - h*e2
    t <- append(t,p6)
    q <- append(q, f(p6))
    
    p7 <- p - h*e1
    t <- append(t,p7)
    q <- append(q, f(p7))
    
    p8 <- p - h*e2
    t <- append(t,p8)
    q <- append(q, f(p8))
    
    p9 <- p + h*e1 - h*e2
    t <- append(t,p9)
    q <- append(q, f(p9))
    min <- which.min(q)
    return(t[min])
}

qhooke_jeeves <- function(point){
    fuf <- c()
    new_point <- point
    old_point <- point
    x <- c()
    
    y <- c()
    x <- append(x,new_point[1])
    y <- append(y,new_point[2])
    
    fuf <- append(fuf,f(new_point))
    difference <- c(1,1) #разница между старой и новой точкой
    
    while(h > e){
        while(difference != c(0,0)){
            #меняем первую переменную
            plus_point <- new_point + h*e1
            minus_point <- new_point - h*e1
            
            if(f(plus_point) < f(minus_point)){
                t_point <- plus_point
            }else{
                t_point <- minus_point
            } 
            
            if(f(t_point) < f(new_point)){
                new_point <- t_point
            }
            x <- append(x,new_point[1])
            y <- append(y,new_point[2])
            fuf <- append(fuf,f(new_point))
            
            #меняем 2 переменную
            plus_point <- new_point + h*e2
            minus_point <- new_point - h*e2
            
            if(f(plus_point) < f(minus_point)){
                t_point <- plus_point
            }else{
                t_point <- minus_point
            } 
            
            if(f(t_point) < f(new_point)){
                new_point <- t_point
            }
            
            
            
            
            "if(f(point) < f(new_point)){
                new_point <- point
            }
            point <- old_point - h*e1
           
            if(f(point) < f(new_point)){
                new_point <- point
            }
            
            point <- new_point + h*e2
            
            if(f(point) < f(new_point)){
                new_point <- point
            }
            
            point <- old_point - h*e2
            
            if(f(point) < f(old_point)){
                old_point <- point
            }"
            
            difference <- old_point - new_point
            old_point <- new_point
            
            x <- append(x,new_point[1])
        
            y <- append(y,new_point[2])
            
            fuf <- append(fuf,f(new_point))
        }
        
        h <- h / d
    }
    print(x)
    print(y)
    print(fuf)
    plot(x,y,type="l")
    return(new_point)
}


qhooke_jeeves <- function(point){
    fuf <- c()
    new_point <- point
    old_point <- point
    x <- c()
    
    y <- c()
    x <- append(x,new_point[1])
    y <- append(y,new_point[2])
    
    fuf <- append(fuf,f(new_point))
    difference <- c(1,1) #разница между старой и новой точкой
    
    while(h > e){
        while(difference != c(0,0)){
            new_point <- find_point(new_point)
            x <- append(x,new_point[1])
            y <- append(y,new_point[2])
            
            fuf <- append(fuf,f(new_point))
            difference <- old_point - new_point
            old_point <- new_point
        }
        
        h <- h / d
    }
    print(x)
    print(y)
    print(fuf)
    plot(x,y,type="l")
    return(new_point)
}


start_point <- c(-8,-9)



end_point <- hooke_jeeves(start_point)

print(end_point)

print(f(end_point))



